# minEE-Builder (minimal Execution Environment Builder)
# CentOS Stream 9 flavor (cs9)

# Base minEE - https://github.com/aknochow/minee
ARG EE_BASE_IMAGE=quay.io/aknochow/minee:cs9
FROM $EE_BASE_IMAGE
# https://github.com/opencontainers/image-spec/blob/main/annotations.md
LABEL org.opencontainers.image.source https://github.com/aknochow/minEE-builder/blob/main/cs9/Containerfile

USER root

# Install gcloud cli
COPY google-cloud-sdk.repo /etc/yum.repos.d/google-cloud-sdk.repo

# dnf packages
RUN microdnf -y update && \
microdnf -y upgrade && \
microdnf module -y enable nodejs:18/common && \
microdnf -y install \
buildah \
google-cloud-sdk-gke-gcloud-auth-plugin \
golang \
make \
nano \
npm \
podman \
podman-docker \
skopeo \
tree \
vim && \
microdnf clean all

# Python
RUN python3 -m ensurepip && \
pip3 install --upgrade pip && \
python3 -m pip install --progress-bar=off --compile --only-binary :all: \
boto3 \
botocore \
build \
dumb-init \
google-auth \
jwt \
kubernetes \
oauthlib \
openstacksdk \
#python-openstackclient \
requests \
setuptools_scm && \ 
python3 -m pip install --progress-bar=off --pre ansible-builder

# Install kubectl
ARG KUBE_VERSION=v1.27.10
RUN curl -LO https://dl.k8s.io/release/$KUBE_VERSION/bin/linux/amd64/kubectl && \
chmod +x ./kubectl && \
mv ./kubectl /usr/local/bin/kubectl

# Podman
RUN install -d -m 0775 -o runner -g root \
/home/runner/.config/containers/registries.conf.d \
/home/runner/.local/share/containers \
/output \
/var/lib/shared/overlay-images \
/var/lib/shared/overlay-layers \
/var/lib/shared/vfs-images \
/var/lib/shared/vfs-layers && \
touch /var/lib/shared/{overlay-images/images.lock,overlay-layers/layers.lock,vfs-images/images.lock,vfs-layers/layers.lock} && \

# Set up registries.conf and containers.conf
sed -i -r 's|short-name-mode ?= ?"enforcing"|short-name-mode="disabled"|g' /etc/containers/registries.conf && \
sed -i 's|"docker.io"|"quay.io", "docker.io"|g' /etc/containers/registries.conf && \
printf '\n[[registry]]\nlocation = "quay.io/alpine"\n[[registry.mirror]]\nlocation="quay.io/ansible-ci/alpine"' >> /etc/containers/registries.conf && \
printf '\n[[registry]]\nlocation = "quay.io/golang"\n[[registry.mirror]]\nlocation="quay.io/ansible-ci/golang"' >> /etc/containers/registries.conf && \
printf '\n[[registry]]\nlocation = "quay.io/nginx"\n[[registry.mirror]]\nlocation="quay.io/ansible-ci/nginx"' >> /etc/containers/registries.conf && \
printf '\n[[registry]]\nlocation = "quay.io/node"\n[[registry.mirror]]\nlocation="quay.io/ansible-ci/node"' >> /etc/containers/registries.conf
ARG _REPO_URL="https://raw.githubusercontent.com/containers/image_build/main/podman"
ADD $_REPO_URL/containers.conf /etc/containers/containers.conf
ADD $_REPO_URL/podman-containers.conf /home/runner/.config/containers/containers.conf
RUN cp /etc/containers/registries.conf /home/runner/.config/containers/registries.conf && \
chmod 644 /etc/containers/containers.conf && \
chown -R runner:root /home/runner /var/lib/containers && \
chmod -R g+rw /home/runner /var/lib/containers
# Note VOLUME options must always happen after the chown call above
# RUN commands can not modify existing volumes
VOLUME /var/lib/containers
VOLUME /home/runner/.local/share/containers
# RUN chmod 644 /etc/containers/containers.conf
# RUN chown -R runner:root /home/runner /var/lib/containers
# RUN chmod -R g+rw /home/runner /var/lib/containers

# Set up entrypoint
COPY entrypoint /bin/entrypoint
RUN chmod +x /bin/entrypoint && \
# Set built on date
echo 'printf "minEE-Builder (cs9) (built on '$(date)')\n"' >> /etc/profile.d/prompt_built_on.sh

# Switch to runner user
USER runner

# Ansible-Galaxy Collections
RUN ansible-galaxy collection download \ 
amazon.aws \
ansible.posix \
awx.awx \
community.general \
community.kubernetes \
community.postgresql \
containers.podman \
google.cloud \
infra.ah_configuration \
openstack.cloud && \
cd collections && ansible-galaxy collection install -r requirements.yml && \
rm -rf collections

WORKDIR /work
ENTRYPOINT ["entrypoint"]
